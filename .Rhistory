# Function to return the ridge estimator
ridge.reg <- function(y,X,lambda) {
beta.hat <- solve( (t(X)%*%X + lambda*diag(nrow(y))) , t(X)%*%y )
return (beta.hat)
}
source('~/ps5.R', echo=TRUE)
?setdiff
?setdiff()
setdiff(1:5,2:3)
n_folds <- 10
folds_i <- sample(rep(1:n_folds, length.out = n_train))
n_folds <- 5
folds_i <- sample(rep(1:n_folds, length.out = nrow(y)))
y = c(1,2,3,4,5)
folds_i <- sample(rep(1:n_folds, length.out = nrow(y)))
seq(0, 1, length.out = 11)
seq(0, 1, length.out = 15)
?sample
folds_i
folds_i
folds_i
seq(1,nrow(X))
seq(1,nrow(y))
seq(1,length(y))
seq(1,10
)
folds <- cut(seq(1,length(y)),breaks=3,labels=FALSE)
folds
?cut
# Generate some test data
x <- runif(100)*10 #Random values between 0 and 10
y <- x+rnorm(100)*.1 #y~x+error
dataset <- data.frame(x,y) #Create data frame
plot(dataset$x,dataset$y) #Plot the data
lin.reg(y,x)
ridge.reg(y,x,2)
ridge.reg(y,x,-2)
ridge.reg(y,x,0.2)
lambda = 0.2
X = x
t(X)%*%X
X
diag(nrow(y))
lambda*diag(nrow(X))
nrow(X)
X = as.matrix(x)
nrow(X)
lambda*diag(nrow(X))
ridge.reg(y,X,0.2)
ridge.reg <- function(y,X,lambda) {
beta.hat <- solve( (t(X)%*%X + lambda*diag(nrow(X))) , t(X)%*%y )
return (beta.hat)
}
ridge.reg(y,X,0.2)
class(X)
nrow(X)
t(X)%*%X
ncol(X)
ridge.reg <- function(y,X,lambda) {
beta.hat <- solve( (t(X)%*%X + lambda*diag(ncol(X))) , t(X)%*%y )
return (beta.hat)
}
ridge.reg(y,X,0.2)
ridge.reg(y,X,5)
ridge.reg(y,X,10)
ridge.reg(y,X,1)
ridge.reg(y,X,0)
lin.reg(y,X)
lasso.reg <- function(y,X,lambda){
max.iter <- 10;
p <- ncol(X);
# LS estimate as the starting value
beta <- solve(t(X)%*%X,t(X)%*%y)
beta.prev <- beta
for( iter in 1:max.iter ){
for( i in 1:P ){
y.aux <- y-X[,setdiff(1:P,i)]%*%beta[setdiff(1:P,i)]
x.aux <- X[,i]
cov <- sum( y.aux*x.aux )
var <- sum( x.aux*x.aux )
# LS estimate of the i'th coefficient
beta[i] <- soft.threshold( cov/var , lambda/(2*var) )
}
if( sum( (beta-beta.prev)**2 ) < 1e-6 ){ return(beta) }
beta.prev <- beta
}
beta
}
lasso.reg(y,X,0.2)
soft.threshold <- function(x,lambda){
sign(x)*max( c( abs(x) - lambda , 0 ) )
}
lasso.reg <- function(y,X,lambda){
max.iter <- 10;
P <- ncol(X);
# LS estimate as the starting value
beta <- solve(t(X)%*%X,t(X)%*%y)
beta.prev <- beta
for( iter in 1:max.iter ){
for( i in 1:P ){
y.aux <- y-X[,setdiff(1:P,i)]%*%beta[setdiff(1:P,i)]
x.aux <- X[,i]
cov <- sum( y.aux*x.aux )
var <- sum( x.aux*x.aux )
# LS estimate of the i'th coefficient
beta[i] <- soft.threshold( cov/var , lambda/(2*var) )
}
if( sum( (beta-beta.prev)**2 ) < 1e-6 ){ return(beta) }
beta.prev <- beta
}
beta
}
lasso.reg(y,X,0.2)
lasso.reg(y,X,0)
folds <- cut(seq(1,nrow(X)),breaks=n_folds,labels=FALSE)
folds
i=1
which(folds_i == i)
test_i <- which(folds == i)
test_i
train_X <- X[-test_i, ]
train_X
train_y <- y[-test_i, ]
train_y <- y[-test_i]
train_y
y
test.fun <- function(pen.reg,x,y,l) {
pen.reg(y,x,l)
}
test.fun(ridge.reg,X,y,0.2)
test.fun(ridge.reg,X,y,5)
test.fun('ridge.reg',X,y,5)
test.fun(ridge.reg,X,y,5)
cv_tmp <- rep(NA,n_folds)
cv_tmp
source('~/ps5.R', echo=TRUE)
source('~/ps5.R', echo=TRUE)
cross.validation(y,X,0.2,ridge.reg
)
X
train_y
train_X
source('~/ps5.R', echo=TRUE)
cross.validation(y,X,0.2,ridge.reg)
source('~/ps5.R', echo=TRUE)
cross.validation(y,X,0.2,ridge.reg)
test_X
test_X <- as.matrix(X[test_i, ])
test_X <- as.matrix(X[test_i, ])
test_X
test_y <- as.matrix(y[-test_i])
test_y
source('~/ps5.R', echo=TRUE)
cross.validation(y,X,0.2,ridge.reg)
source('~/ps5.R', echo=TRUE)
cross.validation(y,X,0.2,ridge.reg)
cross.validation(y,X,0.2,lasso.reg)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
in_txt <- 'Habe nun, ach! Philosophie, Juristerei und Medizin, Und leider auch Theologie Durchaus studiert, mit heissem Bemühn. Da steh ich nun, ich armer Tor! Und bin so klug als wie zuvor; Heisse Magister, heisse Doktor gar Und ziehe schon an die zehen Jahr Herauf, herab und quer und krumm Meine Schüler an der Nase herum Und sehe, dass wir nichts wissen können! Das will mir schier das Herz verbrennen. Zwar bin ich gescheiter als all die Laffen, Doktoren, Magister, Schreiber und Pfaffen; Mich plagen keine Skrupel noch Zweifel, Fürchte mich weder vor Hölle noch Teufel Dafür ist mir auch alle Freud entrissen, Bilde mir nicht ein, was Rechts zu wissen, Bilde mir nicht ein, ich könnte was lehren, Die Menschen zu bessern und zu bekehren. Auch hab ich weder Gut noch Geld, Noch Ehr und Herrlichkeit der Welt; Es möchte kein Hund so länger leben! Drum hab ich mich der Magie ergeben, Ob mir durch Geistes Kraft und Mund Nicht manch Geheimnis würde kund; Dass ich nicht mehr mit saurem Schweiss Zu sagen brauche, was ich nicht weiss; Dass ich erkenne, was die Welt Im Innersten zusammenhält, Schau alle Wirkenskraft und Samen, Und tu nicht mehr in Worten kramen.'
in_txt <- tolower(in_txt)
freq <- myfunc(in_txt)
letters <- freq[[1]]
fvec <- freq[[2]]
codes <- huffencode(fvec)
names(codes) <- letters
print(stack(codes))
enc_text <- encodetext(in_txt,codes)
print(enc_text)
dec_text <- huffdecode(enc_text,codes)
print(dec_text)
codes
length(codes[1])
codes[1]
codes[2]
codes[[2]]
length(codes[[2]])
strlen(codes[[2]])
nchar(codes[[2]])
apply(nchar,codes)
apply(nchar(),codes)
lapply(codes,nchar)
sum(lapply(codes,nchar))
class(lapply(codes,nchar))
lapply(codes,nchar)[1]
lapply(codes,nchar)[[1]]
lapply(sum,lapply(codes,nchar))
lapply(lapply(codes,nchar),sum)
lapply(lapply(codes,nchar)[[]],sum)
lapply(lapply(codes,nchar),sum)
lapply(codes,nchar)
lengths<-lapply(codes,nchar)
lengths[[1]]
lengths[1]
class(lengths)
mapply(lengths,sum)
mapply(lengths,sum())
lapply(lengths,sum())
lapply(lengths,sum)
sum(lengths[[1]],lengths[[2]])
sapply(codes,nchar)
sum(sapply(codes,nchar))
num_bits<-sum(sapply(codes,nchar))
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
source('~/Dropbox/group_work/optimization/Project Optimization.R', echo=TRUE)
nchar(enc_text)
in_txt <- 'O all you host of heaven! O earth! What else? And shall I couple hell? Oh, fie! Hold, hold, my heart, And you, my sinews, grow not instant old, But bear me stiffly up. Remember thee! Ay, thou poor ghost, whiles memory holds a seat In this distracted globe. Remember thee! Yea, from the table of my memory I’ll wipe away all trivial fond records, All saws of books, all forms, all pressures past That youth and observation copied there, And thy commandment all alone shall live Within the book and volume of my brain, Unmixed with baser matter. Yes, by heaven! O most pernicious woman! O villain, villain, smiling, damned villain! My tables! Meet it is I set it down That one may smile, and smile, and be a villain. At least I’m sure it may be so in Denmark. So, uncle, there you are. Now to my word.'
in_txt <- tolower(in_txt)
freq <- myfunc(in_txt)
letters <- freq[[1]]
fvec <- freq[[2]]
codes <- huffencode(fvec)
names(codes) <- letters
enc_text <- encodetext(in_txt,codes)
dec_text <- huffdecode(enc_text,codes)
num_bits<-sum(sapply(codes,nchar))
nchar(enc_text)
nchar(in_txt)
799*8
in_txt <- 'Habe nun, ach! Philosophie, Juristerei und Medizin, Und leider auch Theologie Durchaus studiert, mit heissem Bemühn. Da steh ich nun, ich armer Tor! Und bin so klug als wie zuvor; Heisse Magister, heisse Doktor gar Und ziehe schon an die zehen Jahr Herauf, herab und quer und krumm Meine Schüler an der Nase herum Und sehe, dass wir nichts wissen können! Das will mir schier das Herz verbrennen. Zwar bin ich gescheiter als all die Laffen, Doktoren, Magister, Schreiber und Pfaffen; Mich plagen keine Skrupel noch Zweifel, Fürchte mich weder vor Hölle noch Teufel Dafür ist mir auch alle Freud entrissen, Bilde mir nicht ein, was Rechts zu wissen, Bilde mir nicht ein, ich könnte was lehren, Die Menschen zu bessern und zu bekehren. Auch hab ich weder Gut noch Geld, Noch Ehr und Herrlichkeit der Welt; Es möchte kein Hund so länger leben! Drum hab ich mich der Magie ergeben, Ob mir durch Geistes Kraft und Mund Nicht manch Geheimnis würde kund; Dass ich nicht mehr mit saurem Schweiss Zu sagen brauche, was ich nicht weiss; Dass ich erkenne, was die Welt Im Innersten zusammenhält, Schau alle Wirkenskraft und Samen, Und tu nicht mehr in Worten kramen.'
in_txt <- tolower(in_txt)
freq <- myfunc(in_txt)
letters <- freq[[1]]
fvec <- freq[[2]]
codes <- huffencode(fvec)
names(codes) <- letters
enc_text <- encodetext(in_txt,codes)
dec_text <- huffdecode(enc_text,codes)
num_bits<-sum(sapply(codes,nchar))
nchar(enc_text)
nchar(in_txt)
1154*8
knit_with_parameters('~/Rcode.Rmd')
install.packages('sp')
install.packages('rworldmap')
install.packages('rworldextra')
install.packages('rworldxtra')
library(sp)
library(rworldmap)
library(rworldxtra)
coords2country = function(points){
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$ADMIN
}
load("~/R_Environment_Predictions.RData")
Pokemon
View(Pokemon)
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "localhost", dbname = "project")
install.packages('RMySQL')
View(Pokemon)
library(RMySQL)
install.packages('RMySQL')
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "localhost", dbname = "project")
?dbConnect
??dbConnect
library(RMySQL)
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "localhost", dbname = "project")
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "localhost", dbname = "project")
library(sp)
library(rworldmap)
library(rworldxtra)
library(RMySQL)
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "localhost", dbname = "project")
con <- dbConnect(MySQL(),user = "root", password = "pass", host = "localhost", dbname = "project")
con <- dbConnect(MySQL(),user = "root", password = "pass", host = "localhost", dbname = "project")
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "127.0.0.1", dbname = "project")
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "localhost", dbname = "project")
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "127.0.0.1", dbname = "project")
load("~/R_Environment_Predictions.RData")
View(data)
dbGetQuery(con, "SELECT * FROM pkmn_info")
Pokemon<-dbGetQuery(con, "SELECT * FROM pkmn_info")
save.image("~/R_Environment_Predictions.RData")
g=c(1,2,3,4,5)
sample(g)
sample(g,2)
sample(g)
y<- iris[,1]
A <- cbind(unlist(iris[,2]),unlist(iris[,3]),unlist(iris[,4]))
A
source('~/14d004/ps5.R', echo=TRUE)
lin.reg(y,A)
ridge.reg(y,A,0.5)
lasso.reg(y,A,0.5)
cross.validation(y,A,0.5,ridge.reg)
cross.validation(y,A,0.5,lasso.reg)
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "127.0.0.1", dbname = "project")
library(sp)
library(rworldmap)
library(rworldxtra)
library(RMySQL)
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "127.0.0.1", dbname = "project")
load("~/R_Environment_Predictions.RData")
load("~/R_Environment_Predictions.RData")
library(sp)
library(rworldmap)
library(rworldxtra)
library(RMySQL)
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "127.0.0.1", dbname = "project")
Pokemon<-dbGetQuery(con, "SELECT * FROM pkmn_info")
raw_data<-dbGetQuery(con,"SELECT * FROM 300k")
View(raw_data)
rm(raw_data)
raw_data<-csvread('300k.csv')
raw_data<-read.csv('300k.csv')
View(raw_data)
names(raw_data)
names(data)
raw_data['class']
head(raw_data('class'))
head(raw_data['class'])
head(raw_data['class']-raw_data['pokemonId'])
table(raw_data['class']-raw_data['pokemonId'])
names(data)
names(raw_data)
write.csv(raw_data$latitude,raw_data$longitude)
?write.csv
write.csv(raw_data[,2:3],'coords.csv')
install.packages('randomForest')
library(randomForest)
rf1 <- randomForest(Type.1 ~ .,data=data[,var],na.action=na.omit)
?randomForest
names(data)
rf1 <- randomForest(Type.1 ~ .,data=data[,var],na.action=na.omit)
data[,var]
var <- c("terrainType","closeToWater","population_density","rural","weather","temperature","urban","gymDistanceKm","pokestopDistanceKm","appearedTimeOfDay")
data[,var]
head(data[,var])
var<-c(var,'Type.1')
rf1 <- randomForest(Type.1 ~ .,data=data[,var],na.action=na.omit)
print(rf1)
getwd()
regions <- read.csv('regions.csv')
regions
regions <- read.csv('regions2.csv')
head(regions)
cbind(raw_data,regions)
raw_data <- cbind(raw_data,regions)
# Function to get countries given coordinates
coords2country = function(points){
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$ADMIN
}
# Function to get continents given coordinates
coords2continent = function(points){
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$REGION
}
data <- raw_data
data$country <- coords2country(rev(data[,2:3]))
data$country <- as.character(data$country)
data$country[data[,"country"] == "United States of America"] <- "usa"
data$country[data[,"country"] == "United Kingdom"] <- "UK"
data$continent <- coords2continent(rev(data[,2:3]))
data$continent <- as.character(data$continent)
names(data)
head(data[-city])
head(data[,-city])
head(data[,-'city'])
head(data[-'city'])
class(data)
data$city<-NULL
names(data)
names(Pokemon)
View(Pokemon)
names(Pokemon)[3]
names(Pokemon)[3]<-type1
names(Pokemon)[3]<-'type1'
names(Pokemon)[4]<-'type2'
View(Pokemon)
names(Pokemon)[9]<-'sp_atk'
names(Pokemon)[10]<-'sp_def'
rm(model_full)
?merge
mergechk <- merge(data,Pokemon[,1:3],by.x='class',by.y='id')
mergechk
head(mergechk)
mergechk <- merge(data,Pokemon[,1:3],by.x='class',by.y='id',sort=F)
head(mergechk)
rm(mergechk)
rm(regions)
mergechk <- merge(data,Pokemon[,1:3],by.x='class',by.y='id',sort=F)
names(mergechk)
rm(mergechk)
dbWriteTable(con,"poke_spawns",data)
raw_data<-read.csv('300k.csv')
dbWriteTable(con,"300k",raw_data)
save.image("~/R_Environment_Predictions.RData")
load("~/Dropbox/group_work/computing/Project_Computing_Lab/R_Environment_Data.RData")
names(data)
Pokemon<-dbGetQuery(con, "SELECT * FROM pkmn_info")
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "127.0.0.1", dbname = "project")
Pokemon<-dbGetQuery(con, "SELECT * FROM pkmn_info")
names(Pokemon)[3]<-'type1'
names(Pokemon)[4]<-'type2'
names(Pokemon)[9]<-'sp_atk'
names(Pokemon)[10]<-'sp_def'
data <- merge(data,Pokemon[,1:3],by.x='class',by.y='id',sort=F)
save.image("~/Dropbox/group_work/computing/Project_Computing_Lab/R_Environment_Data.RData")
load(cars)
load(mtcars)
data(mtcars)
data(cars)
data("iris")
x<-1
save.image("~/tmpdata.RData")
install.packages("shiny")
install.packages("shiny")
q()
library(shiny)
source('~/14d004/ps5.R', echo=TRUE)
y<-iris$Sepal.Length
X<-as.matrix(iris[,2:4])
lin.reg(y,X)
ridge.reg(y,X,0.1)
lasso.reg(y,X,0.1)
cross.validation(y,X,0.1,lasso.reg)
cross.validation(y,X,0.1,ridge.reg)
knit_with_parameters('~/14d001/hw2.Rmd')
?round()
?concatenate
??concatenate
shiny::runApp('projects/predictemall')
install.packages("shinythemes")
runApp('projects/predictemall')
install.packages("mapproj")
library(shiny)
library(maps)
library(mapdata)
library(RMySQL)
library(shinythemes)
library(mapproj)
library(ggplot2)
library(leaflet)
runApp('projects/predictemall')
runApp('projects/predictemall')
runApp('projects/predictemall')
shiny::runApp('projects/predictemall')
runApp('projects/predictemall')
runApp('projects/predictemall')
shiny::runApp('projects/predictemall')
shiny::runApp('projects/predictemall')
runApp('projects/predictemall')
runApp('projects/predictemall')
runApp('projects/predictemall')
runApp('projects/predictemall')
runApp('projects/predictemall')
runApp('projects/predictemall')
runApp('projects/predictemall')
imp_predictors <- read.csv("./rf_results.csv")
setwd("~/projects/predictemall")
imp_predictors <- read.csv("./rf_results.csv")
library(sp)
library(rworldmap)
library(rworldxtra)
library(RMySQL)
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "127.0.0.1", dbname = "project")
raw_data<-dbGetQuery(con,"SELECT * FROM 300k")
regions <- read.csv('regions2.csv')
raw_data <- cbind(raw_data,regions)
coords2country = function(points){
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$ADMIN
}
coords2continent = function(points){
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$REGION
}
data <- raw_data
rm(raw_data)
data$country <- coords2country(rev(data[,3:4]))
data$country <- as.character(data$country)
data$country[data[,"country"] == "United States of America"] <- "usa"
data$country[data[,"country"] == "United Kingdom"] <- "UK"
data$continent <- coords2continent(rev(data[,3:4]))
data$continent <- as.character(data$continent)
data$city <- NULL
Pokemon<-dbGetQuery(con, "SELECT * FROM pkmn_info")
names(Pokemon)[3]<-'type1'
names(Pokemon)[4]<-'type2'
names(Pokemon)[9]<-'sp_atk'
names(Pokemon)[10]<-'sp_def'
data <- merge(data,Pokemon[,1:3],by.x='class',by.y='id',sort=F)
data$row_names <- NULL
data[,"class"] <- as.factor(data[,"class"])
data[,"type1"] <- as.factor(data[,"type1"])
data$terrainType <- as.factor(data$terrainType)
data$pokestopDistanceKm <- as.numeric(data$pokestopDistanceKm)
imp_predictors <- read.csv("./rf_results.csv")
save.image("./R_Environment.RData")
runApp()
q()
