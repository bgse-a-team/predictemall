shiny::runApp()
install.packages("RMySQL")
load("/home/michael/Downloads/R_Environment.RData")
runApp()
install.packages("/tmp/Rtmp53vStC/downloaded_packages/RMySQL_0.10.9.tar.gz", repos = NULL, type = "source")
install.packages("/tmp/Rtmp53vStC/downloaded_packages/RMySQL_0.10.9.tar.gz", repos = NULL, type = "source")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("/tmp/Rtmp53vStC/downloaded_packages/RMySQL_0.10.9.tar.gz", repos = NULL, type = "source")
install.packages("/tmp/Rtmp53vStC/downloaded_packages/RMySQL_0.10.9.tar.gz", repos = NULL, type = "source")
install.packages('RMySQL')
install.packages("/tmp/Rtmp53vStC/downloaded_packages/RMySQL_0.10.9.tar.gz", repos = NULL, type = "source")
install.packages("/tmp/Rtmp53vStC/downloaded_packages/RMySQL_0.10.9.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/RMySQL_0.10.8.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
install.packages("/tmp/Rtmp53vStC/downloaded_packages/RMySQL_0.10.9.tar.gz", repos = NULL, type = "source")
install.packages("dbConnect")
installed.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
# Adding pokemon type and name
load("~/Desktop/predictemall/R_Environment.RData")
Pokemon <- read.csv("~/Desktop/predictemall/Pokemon.csv")
# load("~/Desktop/R_Environment_Predictions.RData")
colnames(Pokemon)[1] <- "class"
Pokemon[,3] <- as.character(Pokemon[,3])
data <- merge(data,Pokemon[,1:3],by="class",all=F)
data[,"class"] <- as.factor(data[,"class"])
data[,"Type.1"] <- as.factor(data[,"Type.1"])
data$terrainType <- as.factor(data$terrainType)
data$pokestopDistanceKm <- as.numeric(data$pokestopDistanceKm)
# Fitting multinomial logistic regression for type
library(nnet)
model_full <- multinom(Type.1 ~ terrainType + closeToWater + population_density + rural + weather + temperature +
urban + gymDistanceKm + pokestopDistanceKm + appearedTimeOfDay, data=data)
# Reference category is bug (the most common one)
levels(data$Type.1)
table(data$Type.1)
# Multiple testing predictors
library(car)
Anova(model_full)
# Predictions
pred_full <- predict(model_full,type="probs")
library(effects)
plot(effect("terrainType",model_full))
plot(effect("closeToWater",model_full))
plot(effect("population_density",model_full))
plot(effect("rural",model_full))
plot(effect("weather",model_full))
plot(effect("temperature",model_full))
plot(effect("urban",model_full))
plot(effect("gymDistanceKm",model_full))
plot(effect("pokestopDistanceKm",model_full))
plot(effect("appearedTimeOfDay",model_full))
install.packages("nnet")
# Adding pokemon type and name
load("~/Desktop/predictemall/R_Environment.RData")
Pokemon <- read.csv("~/Desktop/predictemall/Pokemon.csv")
# load("~/Desktop/R_Environment_Predictions.RData")
colnames(Pokemon)[1] <- "class"
Pokemon[,3] <- as.character(Pokemon[,3])
data <- merge(data,Pokemon[,1:3],by="class",all=F)
data[,"class"] <- as.factor(data[,"class"])
data[,"Type.1"] <- as.factor(data[,"Type.1"])
data$terrainType <- as.factor(data$terrainType)
data$pokestopDistanceKm <- as.numeric(data$pokestopDistanceKm)
# Fitting multinomial logistic regression for type
library(nnet)
model_full <- multinom(Type.1 ~ terrainType + closeToWater + population_density + rural + weather + temperature +
urban + gymDistanceKm + pokestopDistanceKm + appearedTimeOfDay, data=data)
# Reference category is bug (the most common one)
levels(data$Type.1)
table(data$Type.1)
# Multiple testing predictors
library(car)
Anova(model_full)
# Predictions
pred_full <- predict(model_full,type="probs")
library(effects)
plot(effect("terrainType",model_full))
plot(effect("closeToWater",model_full))
plot(effect("population_density",model_full))
plot(effect("rural",model_full))
plot(effect("weather",model_full))
plot(effect("temperature",model_full))
plot(effect("urban",model_full))
plot(effect("gymDistanceKm",model_full))
plot(effect("pokestopDistanceKm",model_full))
plot(effect("appearedTimeOfDay",model_full))
shiny::runApp()
?dbGetQuery
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("mapdata")
library(shiny)
library(maps)
library(mapdata)
library(RMySQL)
library(shinythemes)
getwd()
setwd("~/projects/predictemall")
library(sp)
library(rworldmap)
library(rworldxtra)
library(RMySQL)
con <- dbConnect(MySQL(),user = "almysql", password = "pass", host = "127.0.0.1", dbname = "project")
print("successful connection")
raw_data<-dbGetQuery(con,"SELECT * FROM 300k")
regions <- read.csv('regions2.csv')
raw_data <- cbind(raw_data,regions)
coords2country = function(points){
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$ADMIN
}
coords2continent = function(points){
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$REGION
}
data <- raw_data
rm(raw_data)
data$country <- coords2country(rev(data[,2:3]))
data$country <- as.character(data$country)
data$country[data[,"country"] == "United States of America"] <- "usa"
data$country[data[,"country"] == "United Kingdom"] <- "UK"
data$continent <- coords2continent(rev(data[,2:3]))
data$continent <- as.character(data$continent)
data$city <- NULL
Pokemon<-dbGetQuery(con, "SELECT * FROM pkmn_info")
names(Pokemon)[3]<-'type1'
names(Pokemon)[4]<-'type2'
names(Pokemon)[9]<-'sp_atk'
names(Pokemon)[10]<-'sp_def'
data <- merge(data,Pokemon[,1:3],by.x='class',by.y='id',sort=F)
data[,"class"] <- as.factor(data[,"class"])
data[,"type1"] <- as.factor(data[,"type1"])
data$terrainType <- as.factor(data$terrainType)
data$pokestopDistanceKm <- as.numeric(data$pokestopDistanceKm)
raw_data<-dbGetQuery(con,"SELECT * FROM 300k")
regions <- read.csv('regions2.csv')
raw_data <- cbind(raw_data,regions)
coords2country = function(points){
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$ADMIN
}
coords2continent = function(points){
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$REGION
}
data <- raw_data
rm(raw_data)
data$country <- coords2country(rev(data[,2:3]))
data$country <- as.character(data$country)
data$country[data[,"country"] == "United States of America"] <- "usa"
data$country[data[,"country"] == "United Kingdom"] <- "UK"
data$continent <- coords2continent(rev(data[,2:3]))
data$continent <- as.character(data$continent)
data$city <- NULL
Pokemon<-dbGetQuery(con, "SELECT * FROM pkmn_info")
names(Pokemon)[3]<-'type1'
names(Pokemon)[4]<-'type2'
names(Pokemon)[9]<-'sp_atk'
names(Pokemon)[10]<-'sp_def'
data <- merge(data,Pokemon[,1:3],by.x='class',by.y='id',sort=F)
data[,"class"] <- as.factor(data[,"class"])
str(data)
raw_data<-dbGetQuery(con,"SELECT * FROM 300k")
regions <- read.csv('regions2.csv')
raw_data <- cbind(raw_data,regions)
coords2country = function(points){
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$ADMIN
}
coords2continent = function(points){
countriesSP <- getMap(resolution='low')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$REGION
}
data <- raw_data
rm(raw_data)
data$country <- coords2country(rev(data[,2:3]))
data$country <- as.character(data$country)
data$country[data[,"country"] == "United States of America"] <- "usa"
data$country[data[,"country"] == "United Kingdom"] <- "UK"
data$continent <- coords2continent(rev(data[,2:3]))
data$continent <- as.character(data$continent)
data$city <- NULL
Pokemon<-dbGetQuery(con, "SELECT * FROM pkmn_info")
names(Pokemon)[3]<-'type1'
names(Pokemon)[4]<-'type2'
names(Pokemon)[9]<-'sp_atk'
names(Pokemon)[10]<-'sp_def'
data <- merge(data,Pokemon[,1:3],by.x='class',by.y='id',sort=F)
data$row_names <- NULL
data[,"class"] <- as.factor(data[,"class"])
data[,"type1"] <- as.factor(data[,"type1"])
data$terrainType <- as.factor(data$terrainType)
data$pokestopDistanceKm <- as.numeric(data$pokestopDistanceKm)
table(data$pokestopDistanceKm)
is.na(data$pokestopDistanceKm)
table(is.na(data$pokestopDistanceKm))
dbWriteTable(con,"poke_spawns",data)
